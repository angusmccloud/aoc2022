{"ast":null,"code":"var _jsxFileName = \"/Users/connortyrrell/Repos/advent-of-code-2022/src/pages/Day4/Day4Page.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport Typography from '@material-ui/core/Typography';\nimport { Navigation } from '../../containers';\nimport data from './input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Day4Page = () => {\n  _s();\n  const [bingoNumbers, setBingoNumbers] = useState([]);\n  const [bingoBoards, setBingoBoards] = useState([]);\n  const [result1, setResult1] = useState('');\n  const [result2, setResult2] = useState('');\n  const {\n    taskNumber\n  } = useParams();\n  useEffect(() => {\n    const rawArray = data.split('\\n').map(v => v.trim());\n    setBingoNumbers(rawArray[0].split(',').map(v => parseInt(v)));\n    const allBoards = [];\n    let board = [];\n    let rowNum = 0;\n    for (let i = 2; i < rawArray.length; i++) {\n      if (rawArray[i] !== '') {\n        const cleanRow = rawArray[i].replace(/\\s\\s+/g, ' ');\n        const numbers = cleanRow.split(' ');\n        const row = [];\n        for (let ii = 0; ii < numbers.length; ii++) {\n          row.push({\n            rowNum,\n            colNum: ii,\n            number: parseInt(numbers[ii]),\n            chosen: false\n          });\n        }\n        board.push(row);\n        // console.log(rawArray[i]);\n        rowNum++;\n        if (i % 6 === 0) {\n          rowNum = 0;\n          allBoards.push(board);\n          // console.log('-- End of Puzzle?!?! --', board);\n          board = [];\n        }\n      }\n    }\n    setBingoBoards(allBoards);\n  }, []);\n  useEffect(() => {\n    // Solve Task 1\n    if (taskNumber === '1' && result1 === '' && bingoBoards.length > 0) {\n      const newBoards = [...bingoBoards];\n      let bingoFound = false;\n      let winningBoard = [];\n      for (let i = 0; i < bingoNumbers.length; i++) {\n        const num = bingoNumbers[i];\n        for (let ii = 0; ii < newBoards.length; ii++) {\n          let changeFound = false;\n          for (let iii = 0; iii < newBoards[ii].length; iii++) {\n            for (let iiii = 0; iiii < newBoards[ii][iii].length; iiii++) {\n              if (newBoards[ii][iii][iiii].number === num) {\n                newBoards[ii][iii][iiii].chosen = true;\n                break;\n              }\n            }\n            if (changeFound) {\n              break;\n            }\n          }\n          if (changeFound) {\n            break;\n          }\n        }\n        // console.log(`-- Looped on ${num} --`, newBoards);\n        // At the end of each number, check if there's a Bingo\n        for (let ii = 0; ii < newBoards.length; ii++) {\n          const board = newBoards[ii];\n          // Check Rows\n          for (let row = 0; row < board.length; row++) {\n            if (board[row][0].chosen && board[row][1].chosen && board[row][2].chosen && board[row][3].chosen && board[row][4].chosen) {\n              bingoFound = true;\n              winningBoard = board;\n              break;\n            }\n          }\n          // Check Columns\n          for (let col = 0; col < board.length; col++) {\n            if (board[0][col].chosen && board[1][col].chosen && board[2][col].chosen && board[3][col].chosen && board[4][col].chosen) {\n              bingoFound = true;\n              winningBoard = board;\n              break;\n            }\n          }\n        }\n        if (bingoFound) {\n          // console.log('-- BINGO FOUND  --', i, winningBoard);\n          let unmarkedSum = 0;\n          for (let ii = 0; ii < winningBoard.length; ii++) {\n            for (let iii = 0; iii < winningBoard[ii].length; iii++) {\n              if (!winningBoard[ii][iii].chosen) {\n                unmarkedSum += winningBoard[ii][iii].number;\n              }\n            }\n          }\n          const res = unmarkedSum * num;\n          // console.log('-- WINNER --', unmarkedSum, num, res);\n          setResult1(`Unmarked Sum: ${unmarkedSum} * Winning Number ${num} = ${res}`);\n          break;\n        }\n      }\n    }\n    /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, [bingoBoards]);\n  useEffect(() => {\n    // Solve Task 2\n    if (taskNumber === '2' && result2 === '' && bingoBoards.length > 0) {\n      const winningBoards = [];\n      const newBoards = bingoBoards.map((b, i) => {\n        return {\n          solved: false,\n          numbers: b,\n          boardNumber: i\n        };\n      });\n      const solvedBoards = [];\n      for (let i = 0; i < bingoNumbers.length; i++) {\n        const num = bingoNumbers[i];\n        const remainingBoards = newBoards.filter(b => !solvedBoards.includes(b.boardNumber));\n        for (let ii = 0; ii < remainingBoards.length; ii++) {\n          let changeFound = false;\n          for (let iii = 0; iii < remainingBoards[ii].numbers.length; iii++) {\n            for (let iiii = 0; iiii < remainingBoards[ii].numbers[iii].length; iiii++) {\n              // if(i === 0 && ii === 0 && iii === 0){\n              //   console.log('-- Check First Row --', num, newBoards[ii].numbers[iii][iiii].number, newBoards.numbers[ii][iii]);\n              // }\n\n              if (remainingBoards[ii].numbers[iii][iiii].number === num) {\n                remainingBoards[ii].numbers[iii][iiii].chosen = true;\n                break;\n              }\n            }\n            if (changeFound) {\n              break;\n            }\n          }\n          if (changeFound) {\n            break;\n          }\n        }\n        // console.log(`-- Looped on ${num} --`, remainingBoards);\n        // At the end of each number, check for Bingos\n        for (let ii = 0; ii < remainingBoards.length; ii++) {\n          const board = remainingBoards[ii];\n          // Check Rows\n          for (let row = 0; row < board.numbers.length; row++) {\n            if (board.numbers[row][0].chosen && board.numbers[row][1].chosen && board.numbers[row][2].chosen && board.numbers[row][3].chosen && board.numbers[row][4].chosen) {\n              board.solved = true;\n              winningBoards.push({\n                board,\n                lastNum: num\n              });\n              solvedBoards.push(board.boardNumber);\n            }\n          }\n          // Check Columns\n          for (let col = 0; col < board.numbers.length; col++) {\n            if (board.numbers[0][col].chosen && board.numbers[1][col].chosen && board.numbers[2][col].chosen && board.numbers[3][col].chosen && board.numbers[4][col].chosen) {\n              board.solved = true;\n              winningBoards.push({\n                board,\n                lastNum: num\n              });\n              solvedBoards.push(board.boardNumber);\n            }\n          }\n        }\n      }\n      // console.log('-- winningBoards --', winningBoards);\n      if (winningBoards.length > 0) {\n        const lastWinner = winningBoards[winningBoards.length - 1];\n        // console.log('-- lastWinner --', lastWinner);\n        if (lastWinner) {\n          let unmarkedSum = 0;\n          for (let ii = 0; ii < lastWinner.board.numbers.length; ii++) {\n            for (let iii = 0; iii < lastWinner.board.numbers[ii].length; iii++) {\n              if (!lastWinner.board.numbers[ii][iii].chosen) {\n                unmarkedSum += lastWinner.board.numbers[ii][iii].number;\n              }\n            }\n          }\n          const res = unmarkedSum * lastWinner.lastNum;\n          // console.log('-- Last Bingo! --', unmarkedSum, lastWinner.lastNum, res);\n          setResult2(`Unmarked Sum: ${unmarkedSum} * Last Winning Number ${lastWinner.lastNum} = ${res}`);\n        }\n      }\n    }\n    /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, [bingoBoards]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Navigation, {\n      pageName: `Day 4, Task ${taskNumber}`,\n      children: [result1 !== '' && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: [\"Result 1: \", result1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), result2 !== '' && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: [\"Result 2: \", result2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Bingo Numbers: \", bingoNumbers.map(b => `${b}, `)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(Day4Page, \"X2e+YRbIAF0RllxfjjFCiLHOU2E=\", false, function () {\n  return [useParams];\n});\n_c = Day4Page;\nexport default Day4Page;\nvar _c;\n$RefreshReg$(_c, \"Day4Page\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Typography","Navigation","data","Day4Page","bingoNumbers","setBingoNumbers","bingoBoards","setBingoBoards","result1","setResult1","result2","setResult2","taskNumber","rawArray","split","map","v","trim","parseInt","allBoards","board","rowNum","i","length","cleanRow","replace","numbers","row","ii","push","colNum","number","chosen","newBoards","bingoFound","winningBoard","num","changeFound","iii","iiii","col","unmarkedSum","res","winningBoards","b","solved","boardNumber","solvedBoards","remainingBoards","filter","includes","lastNum","lastWinner"],"sources":["/Users/connortyrrell/Repos/advent-of-code-2022/src/pages/Day4/Day4Page.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport Typography from '@material-ui/core/Typography';\nimport { Navigation } from '../../containers';\nimport data from './input';\n\nconst Day4Page = () => {\n  const [bingoNumbers, setBingoNumbers] = useState([]);\n  const [bingoBoards, setBingoBoards] = useState([]);\n  const [result1, setResult1] = useState('');\n  const [result2, setResult2] = useState('');\n  const { taskNumber } = useParams();\n\n  useEffect(() => {\n    const rawArray = data.split('\\n').map(v => v.trim());\n    setBingoNumbers(rawArray[0].split(',').map(v => parseInt(v)));\n    const allBoards = [];\n    let board = [];\n    let rowNum = 0;\n    for (let i = 2; i < rawArray.length; i++) {\n      if (rawArray[i] !== '') {\n        const cleanRow = rawArray[i].replace(/\\s\\s+/g, ' ');\n        const numbers = cleanRow.split(' ');\n        const row = [];\n        for (let ii = 0; ii < numbers.length; ii++) {\n          row.push(\n            {\n              rowNum,\n              colNum: ii,\n              number: parseInt(numbers[ii]),\n              chosen: false\n            }\n          )\n        }\n        board.push(row);\n        // console.log(rawArray[i]);\n        rowNum++;\n        if (i % 6 === 0) {\n          rowNum = 0;\n          allBoards.push(board);\n          // console.log('-- End of Puzzle?!?! --', board);\n          board = [];\n        }\n      }\n    }\n    setBingoBoards(allBoards);\n  }, []);\n\n  useEffect(() => {\n    // Solve Task 1\n    if (taskNumber === '1' && result1 === '' && bingoBoards.length > 0) {\n      const newBoards = [...bingoBoards];\n      let bingoFound = false;\n      let winningBoard = [];\n      for (let i = 0; i < bingoNumbers.length; i++) {\n        const num = bingoNumbers[i];\n        for (let ii = 0; ii < newBoards.length; ii++) {\n          let changeFound = false;\n          for (let iii = 0; iii < newBoards[ii].length; iii++) {\n            for (let iiii = 0; iiii < newBoards[ii][iii].length; iiii++) {\n\n              if (newBoards[ii][iii][iiii].number === num) {\n                newBoards[ii][iii][iiii].chosen = true;\n                break;\n              }\n            }\n            if (changeFound) {\n              break;\n            }\n          }\n          if (changeFound) {\n            break;\n          }\n        }\n        // console.log(`-- Looped on ${num} --`, newBoards);\n        // At the end of each number, check if there's a Bingo\n        for (let ii = 0; ii < newBoards.length; ii++) {\n          const board = newBoards[ii];\n          // Check Rows\n          for (let row = 0; row < board.length; row++) {\n            if (board[row][0].chosen && board[row][1].chosen && board[row][2].chosen && board[row][3].chosen && board[row][4].chosen) {\n              bingoFound = true;\n              winningBoard = board;\n              break;\n            }\n          }\n          // Check Columns\n          for (let col = 0; col < board.length; col++) {\n            if (board[0][col].chosen && board[1][col].chosen && board[2][col].chosen && board[3][col].chosen && board[4][col].chosen) {\n              bingoFound = true;\n              winningBoard = board;\n              break;\n            }\n          }\n        }\n        if (bingoFound) {\n          // console.log('-- BINGO FOUND  --', i, winningBoard);\n          let unmarkedSum = 0;\n          for (let ii = 0; ii < winningBoard.length; ii++) {\n            for (let iii = 0; iii < winningBoard[ii].length; iii++) {\n              if (!winningBoard[ii][iii].chosen) {\n                unmarkedSum += winningBoard[ii][iii].number;\n              }\n            }\n          }\n          const res = unmarkedSum * num;\n          // console.log('-- WINNER --', unmarkedSum, num, res);\n          setResult1(`Unmarked Sum: ${unmarkedSum} * Winning Number ${num} = ${res}`);\n          break;\n        }\n      }\n    }\n    /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, [bingoBoards]);\n\n\n  useEffect(() => {\n    // Solve Task 2\n    if (taskNumber === '2' && result2 === '' && bingoBoards.length > 0) {\n      const winningBoards = [];\n      const newBoards = bingoBoards.map((b, i) => {\n        return {\n          solved: false,\n          numbers: b,\n          boardNumber: i\n        };\n      });\n      const solvedBoards = [];\n      for (let i = 0; i < bingoNumbers.length; i++) {\n        const num = bingoNumbers[i];\n        const remainingBoards = newBoards.filter((b) => !solvedBoards.includes(b.boardNumber));\n        for (let ii = 0; ii < remainingBoards.length; ii++) {\n          let changeFound = false;\n          for (let iii = 0; iii < remainingBoards[ii].numbers.length; iii++) {\n            for (let iiii = 0; iiii < remainingBoards[ii].numbers[iii].length; iiii++) {\n              // if(i === 0 && ii === 0 && iii === 0){\n              //   console.log('-- Check First Row --', num, newBoards[ii].numbers[iii][iiii].number, newBoards.numbers[ii][iii]);\n              // }\n\n              if (remainingBoards[ii].numbers[iii][iiii].number === num) {\n                remainingBoards[ii].numbers[iii][iiii].chosen = true;\n                break;\n              }\n            }\n            if (changeFound) {\n              break;\n            }\n          }\n          if (changeFound) {\n            break;\n          }\n        }\n        // console.log(`-- Looped on ${num} --`, remainingBoards);\n        // At the end of each number, check for Bingos\n        for (let ii = 0; ii < remainingBoards.length; ii++) {\n          const board = remainingBoards[ii];\n          // Check Rows\n          for (let row = 0; row < board.numbers.length; row++) {\n            if (board.numbers[row][0].chosen && board.numbers[row][1].chosen && board.numbers[row][2].chosen && board.numbers[row][3].chosen && board.numbers[row][4].chosen) {\n              board.solved = true;\n              winningBoards.push({\n                board,\n                lastNum: num\n              });\n              solvedBoards.push(board.boardNumber);\n            }\n          }\n          // Check Columns\n          for (let col = 0; col < board.numbers.length; col++) {\n            if (board.numbers[0][col].chosen && board.numbers[1][col].chosen && board.numbers[2][col].chosen && board.numbers[3][col].chosen && board.numbers[4][col].chosen) {\n              board.solved = true;\n              winningBoards.push({\n                board,\n                lastNum: num\n              });\n              solvedBoards.push(board.boardNumber);\n            }\n          }\n        }\n      }\n      // console.log('-- winningBoards --', winningBoards);\n      if (winningBoards.length > 0) {\n        const lastWinner = winningBoards[winningBoards.length - 1];\n        // console.log('-- lastWinner --', lastWinner);\n        if (lastWinner) {\n          let unmarkedSum = 0;\n          for (let ii = 0; ii < lastWinner.board.numbers.length; ii++) {\n            for (let iii = 0; iii < lastWinner.board.numbers[ii].length; iii++) {\n              if (!lastWinner.board.numbers[ii][iii].chosen) {\n                unmarkedSum += lastWinner.board.numbers[ii][iii].number;\n              }\n            }\n          }\n          const res = unmarkedSum * lastWinner.lastNum;\n          // console.log('-- Last Bingo! --', unmarkedSum, lastWinner.lastNum, res);\n          setResult2(`Unmarked Sum: ${unmarkedSum} * Last Winning Number ${lastWinner.lastNum} = ${res}`);\n        }\n      }\n    }\n    /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, [bingoBoards]);\n\n  return (\n    <div>\n      <Navigation pageName={`Day 4, Task ${taskNumber}`}>\n        {result1 !== '' && (\n          <Typography variant='h5'>\n            Result 1: {result1}\n          </Typography>\n        )}\n        {result2 !== '' && (\n          <Typography variant='h5'>\n            Result 2: {result2}\n          </Typography>\n        )}\n        <Typography>\n          Bingo Numbers: {bingoNumbers.map((b) => `${b}, `)}\n        </Typography>\n      </Navigation>\n    </div>\n  );\n}\n\nexport default Day4Page;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}